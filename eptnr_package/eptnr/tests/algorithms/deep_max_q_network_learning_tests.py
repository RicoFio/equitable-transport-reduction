import torch


class DummyQTargetNet:

    def __init__(self):
        pass

    def evaluate(self):
        def func(x: torch.Tensor):
            q_table = {
                '[0.0, 1.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 0.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 0.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 1.0, 0.0, 1.0]': torch.tensor([50.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 1.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 0.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 0.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 50.00000]),
                '[0.0, 0.0, 0.0, 1.0]': torch.tensor([0.00000, 50.00000, 50.00000, 0.00000]),
                '[0.0, 0.0, 1.0, 0.0]': torch.tensor([0.00000, 100.00000, 0.00000, 50.00000]),
                '[0.0, 1.0, 0.0, 0.0]': torch.tensor([50.00000, 0.00000, 100.00000, 50.00000]),
                '[1.0, 0.0, 0.0, 0.0]': torch.tensor([0.00000, 50.00000, 0.00000, 0.00000]),
                '[0.0, 0.0, 0.0, 0.0]': torch.tensor([50.00000, 100.00000, 100.00000, 50.00000]),
            }
            final_values = []

            for i in x.tolist():
                final_values.append(q_table[str(i)])

            return torch.cat(final_values).view(-1, len(i))

        return func


class DummyMaxQTargetNet:

    def __init__(self):
        pass

    def evaluate(self):
        def func(x: torch.Tensor):
            q_table = {
                '[0.0, 1.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 0.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 0.0, 1.0, 1.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 1.0, 0.0, 1.0]': torch.tensor([50.00000, 0.00000, 0.00000, 0.00000]),
                '[0.0, 1.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 0.0, 1.0]': torch.tensor([0.00000, 50.00000, 0.00000, 0.00000]),
                '[1.0, 0.0, 1.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 0.00000]),
                '[1.0, 1.0, 0.0, 0.0]': torch.tensor([0.00000, 0.00000, 0.00000, 50.00000]),
                '[0.0, 0.0, 0.0, 1.0]': torch.tensor([0.00000, 50.00000, 50.00000, 0.00000]),
                '[0.0, 0.0, 1.0, 0.0]': torch.tensor([0.00000, 100.00000, 0.00000, 50.00000]),
                '[0.0, 1.0, 0.0, 0.0]': torch.tensor([100.00000, 0.00000, 100.00000, 50.00000]),
                '[1.0, 0.0, 0.0, 0.0]': torch.tensor([0.00000, 100.00000, 0.00000, 50.00000]),
                '[0.0, 0.0, 0.0, 0.0]': torch.tensor([150.00000, 100.00000, 100.00000, 50.00000]),
            }
            final_values = []

            for i in x.tolist():
                final_values.append(q_table[str(i)])

            return torch.cat(final_values).view(-1, len(i))

        return func